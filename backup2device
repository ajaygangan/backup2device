#!/usr/bin/env bash

# Script: backup2device.sh
# Author: Ajay G
# Version: 1.0
# Description: Script for backing-up $HOME or specified dirs to external devices/drives or to local dirs.

# ERROR HANDLING
# -e (errexit) - Exit immediately if any command returns a non-zero status
# -u (nounset) - Treat unset variables as errors and exit immediately
# -x (xtrace) - Print commands and their arguments as they are executed
# -o pipefail - Pipeline returns the exit status of the last command to fail, or zero if all succeed
set -euo pipefail

# VARIABLES
# File name of the 'backed-up' archive file
BACKUP_FILE_NAME="$(date +%Y%m%dT%H%M%S)--$(hostname)__$(cat /etc/*-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '" ()').tar"

# Directories or files to 'exclude' from $HOME
# Specify only the filename
# eg; (".cache" "Desktop" "Downloads" "Music" "Videos")
EXCLUDE_DIRS=()

# Directories or files to 'include' other than from $HOME
# Specify the full filename i.e., including the path
# eg; ("/etc" "/usr/local/share")
INCLUDE_DIRS=()

# Options for tar
# -c - create archive
# -z - use gzip / -J - use xz
# -p - preserve permissions
# -f - output file
TAR_OPTIONS="-czpf"

# WARN
[ -z "$TAR_OPTIONS" ] && echo "ERROR: TAR_OPTIONS is empty in the script; fatal!"
[ ${#INCLUDE_DIRS[@]} -eq 0 ] && echo "Warning: INCLUDE_DIRS is empty in the script; not fatal!"
[ ${#EXCLUDE_DIRS[@]} -eq 0 ] && echo "Warning: EXCLUDE_DIRS is empty in the script; not fatal!"
DEPENDENCIES=(tar gpg ls lsblk nl read echo mkdir)
for dep in "${DEPENDENCIES[@]}"; do
    command -v "$dep" &> /dev/null || { echo "Error: $dep is not installed. Please install it to continue."; exit 1; }
done

# FUNCTIONS
# First prompt
echo "Backup to:"
echo -e "External drive\nMTP Phone/Device\nLocal" | nl -s ') '
read -p "Choose a Number and Enter:" choice_num
# 1. External drive
if [ "$choice_num" = "1" ]; then
    # Get a list of external drives (excluding internal drives and loop devices)
    DRIVES=$(lsblk -d -o NAME,FSTYPE,SIZE,MOUNTPOINT -e 7,1 | awk '$1 ~ /^sd/ && $4 != "/" {print $0}')
    # Check if any drives are found
    if [ -z "$DRIVES" ]; then
	echo "No external drives found."
	exit 1
    fi
    # Display drives in a numbered menu
    echo "Select an external drive:"
    echo "$DRIVES" | nl -s ') '
    read -p "Choose a Number and Enter:" drive_num
    # Get the selected drive's mountpoint
    DRIVE_SEL=$(echo "$DRIVES" | sed -n "${drive_num}p" | awk '{print $4}')
    # Check if the drive is mounted
    if [ -z "$DRIVE_SEL" ]; then
	echo "Please mount the Drive and try again!"
	exit 1
    fi
    # Prompt for confirmation
    read -p "Proceed with backup on $DRIVE_SEL/Backups ? (y/n): " confirm
    if [ "$confirm" != "y" ]; then
	read -e -p "Enter location (start from $DRIVE_SEL): " confirm_loc
	EXTERNAL_DIR="$confirm_loc"
	read -e -p "Proceed with backup to $EXTERNAL_DIR (y/n): " confirmy
	if [ "$confirmy" != "y" ]; then
	    echo "Backup cancelled."
	    exit 0
	fi
    else
	EXTERNAL_DIR="$DRIVE_SEL/Backups"
    fi
    mkdir -p "$EXTERNAL_DIR"
    DEST="$EXTERNAL_DIR/$BACKUP_FILE_NAME"
    # 2. MTP Phone/Device
elif [ "$choice_num" = "2" ]; then
    # Check for gvfs-mtp mountpoint
    DEVICE_MOUNT="/run/user/$UID/gvfs/mtp*"
    if ! ls $DEVICE_MOUNT >/dev/null 2>&1; then
	echo "No device mounted. Connect your device via USB."
	exit 1
    fi
    # Prompt for confirmation
    read -p "$(ls -1t /run/user/$UID/gvfs/) detected. Proceed with backup? (y/n): " confirm
    if [ "$confirm" != "y" ]; then
	echo "Backup cancelled."
	exit 0
    fi
    DEVICE_DIR="/run/user/$UID/gvfs/$(ls -1tb /run/user/$UID/gvfs/)/Internal shared storage/Backups"
    mkdir -p "$DEVICE_DIR"
    DEST="$DEVICE_DIR/$BACKUP_FILE_NAME"
    # TODO; support for other mtp mountpoints;
    # 3. Local
elif [ "$choice_num" = "3" ]; then
    read -p "Proceed with backup to ~/Downloads/Backups (y/n): " confirm
    if [ "$confirm" != "y" ]; then
	read -e -p "Enter location: " confirm_loc
	LOCAL_DIR="$confirm_loc"
	read -p "Proceed with backup to $LOCAL_DIR (y/n): " confirmy
	if [ "$confirmy" != "y" ]; then
	    echo "Backup cancelled."
	    exit 0
	fi
    else
	LOCAL_DIR="$HOME/Downloads/Backups"
    fi
    mkdir -p "$LOCAL_DIR"
    DEST="$LOCAL_DIR/$BACKUP_FILE_NAME"
else
    echo "Invalid choice"
    exit 1
fi

# Functions for appending dirs mentioned in EXCLUDE_FLAGS and INCLUDE_FLAGS to tar cmd
EXCLUDE_FLAGS=()
for dir in "${EXCLUDE_DIRS[@]}"; do
    EXCLUDE_FLAGS+=("--exclude=$dir")
done
INCLUDE_FLAGS=()
for dir in "${INCLUDE_DIRS[@]}"; do
    INCLUDE_FLAGS+=("$dir")
done
# To write tar archive directly to destination
read -p "Proceed with backup Encryption (y/n): " confirm
if [ $confirm != "y" ]; then
    tar $TAR_OPTIONS "$DEST" "${INCLUDE_FLAGS[@]}" -C "$HOME" "${EXCLUDE_FLAGS[@]}" .
    else
	tar $TAR_OPTIONS - "${INCLUDE_FLAGS[@]}" -C "$HOME" "${EXCLUDE_FLAGS[@]}" . | gpg --symmetric -o "$DEST".gpg
fi
# VERIFY
if [ $? -eq 0 ]; then
    echo "Backup successfully created at $DEST"
else
    echo "Failed to create backup at $DEST"
    exit 1
fi
